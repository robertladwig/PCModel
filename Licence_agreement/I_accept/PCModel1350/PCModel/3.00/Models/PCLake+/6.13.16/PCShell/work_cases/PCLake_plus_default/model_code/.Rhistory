ifelse(out==0, "Model compiled successfully", "Model compile error")
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern = FALSE)
options(warn = defaultW)
defaultW <- getOption("warn")
options(warn = -1)
## define directory of model.cpp file
dir_MODEL <-	paste0(dirHOME,
"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/work_cases/",
nameWORKCASE,
"/model_code/")
setwd(dir_MODEL)
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern = FALSE)
options(warn = defaultW)
ifelse(out==0, "Model compiled successfully", "Model compile error")
## load all the functions
source(paste(dirHome,"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
## 4. Compile model
PCModelCompileModelWorkCase(dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
#system("R CMD SHLIB model.cpp")
out <- system2("R CMD SHLIB model.cpp", stdout = TRUE)
#system("R CMD SHLIB model.cpp")
out <- system2("R CMD SHLIB model.cpp", stdout = TRUE)
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", stdout = TRUE)
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp"
options(warn = defaultW)
return(ifelse(out==0, "Model compiled successfully", "Model compile error"))
# system(paste("R --arch x64 CMD SHLIB ", dir_SCHIL,"scripts/cpp2R/","model.cpp",sep=""))
## NB. can throw error on architecture x64
# system("R --arch x64 CMD SHLIB model.cpp")
}
#initialization, cpp copying, cpp editing, etc
#	either integrated into each function
#		make into a function called within each function
#make into separate function and call manually
#	avoids calling when model is already set up, but risks that model is not set up
#		make a check to see if the model is set up already
PCModelInitializeModel <- function(lDATM = NULL,
dfRUN_SETTINGS = lDATM$run_settings,
dfSTATES = lDATM$states,
dfPARAMS = lDATM$params,
dirHOME,
nameWORKCASE) {
## due to the way the function is written, dfSTATES/dfPARAMS will be made either based on lDATM (lDATM is given & dfSTATES is not, which will then default to lDATM$states)
## or on it own argument (when one is given)
## using lDATM is the simple way to get to dfSTATES and dfPARAMS, lDATM itself is not used beyond the df's for states and params
## debug
# dfRUN_SETTINGS <- lDATM_SETTINGS$run_settings
# dfSTATES <- lDATM_SETTINGS$states
# dfPARAMS <- lDATM_SETTINGS$params
# dirHOME <- dirHome
# nameWORKCASE <- nameWorkCase
## error catching
if(is.null(lDATM)==TRUE){
if(is.null(dfRUN_SETTINGS)==TRUE){stop("Please add a data frame with states to the dfRUN_SETTINGS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfSTATES)==TRUE){stop("Please add a data frame with states to the dfSTATES argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfPARAMS)==TRUE){stop("Please add a data frame with states to the dfPARAMS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
}
## define directories of files
dir_SCHIL = paste0(dirHOME, "PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/")	# location of PCShell
dir_CPP =	paste0(dir_SCHIL, "work_cases/", nameWORKCASE, "/source_cpp/")
dir_CPP_adj =	paste0(dir_SCHIL, "work_cases/", nameWORKCASE, "/source_cpp_adjusted/")
dir_DLL =	paste0(dir_SCHIL, "work_cases/", nameWORKCASE, "/model_code/")
## prepare the dataframe to connect the output to
dfSTATES_RESULTS <- as.data.frame(dfSTATES[, which(colnames(dfSTATES) %in% c('iReportState','sInitialStateName'))])
## load initial states calculation
dyn.load(paste(dir_DLL, "model.dll", sep = ""))
ini <- function(parm, y, nr_of_states){.C("InitializeModel", param = parm, initState = y, state = double(nr_of_states))}
## loop over all runs in the dfRUN_SETTINGS
for(i in colnames(dfRUN_SETTINGS)){
# i <- colnames(dfRUN_SETTINGS)[1]
state_set <- dfRUN_SETTINGS["iStateSet", i]
param_set <- dfRUN_SETTINGS["iParamSet", i]
sel_states <- dfSTATES[, state_set + 3]
names(sel_states)	=	dfSTATES$sInitialStateName
sel_params <- dfPARAMS[, param_set + 4]
names(sel_params) <- row.names(dfPARAMS)
# sel_params[which(is.na(sel_params)==T)] <- 0
## calculate initial states
calc_inits <- ini(sel_params, sel_states, nrow(dfSTATES))
calc_inits_sel <- calc_inits$state ## get initial values of state variables
names(calc_inits_sel) <- row.names(dfSTATES) ## combine name and value
## plak alles aan elkaar vast:
dfSTATES_RESULTS <- cbind.data.frame(dfSTATES_RESULTS, new_col = calc_inits_sel)
colnames(dfSTATES_RESULTS)[which(colnames(dfSTATES_RESULTS) == "new_col")] <- paste0("runSettings_", i)
}
dyn.unload(paste(dir_DLL, "model.dll", sep = "")) ## decouple model.dll
return(dfSTATES_RESULTS)
}
## Run a single instance of PCLake
PCmodelSingleRun <- function(lDATM = NULL,
dfRUN_SETTINGS = lDATM$run_settings,
nRUN_SET,
dfSTATES = lDATM$states,
dfPARAMS = lDATM$params,
dfAUXIL = lDATM$auxils,
lFORCINGS = lDATM$forcings,
integrator_method,
dirHOME,
nameWORKCASE,
tAVERAGE = FALSE){
## debug
# lDATM          <- lDATM_SETTINGS     ## list with all PCmodel settings
# dfRUN_SETTINGS  <- lDATM$run_settings ## default df with PCmodel control settings
# nRUN_SET       <- 0                  ## the run set which will be used to run the model
# dfSTATES       <- InitStates         ## default df with PCmodel states;
# dfPARAMS       <- lDATM$params       ## default df with PCmodel parameters;
# dfAUXIL        <- lDATM$auxils       ## default df with PCmodel auxiliaries
# lFORCINGS      <- lDATM$forcings     ## default df with PCmodel forcings
# integrator_method <- "vode"          ## selected integrator method
# dirHOME <- dirHome
# dirHOME        <- "C:/Users/Lilith Kramer/PCModel/PCModel-master/Licence_agreement/I_accept/"	## location of the PCModel1350 folder
# nameWORKCASE   <- nameWorkCase
# tAVERAGE       <- FALSE             ## use averaging on the output dataframe; full dataframe will be reduced to only one line. Uses the start and end day of the control settings.
## check if the input data is present
if(is.null(lDATM)==TRUE){
if(is.null(dfSTATES)==TRUE){stop("Please add a data frame with states to the dfSTATES argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfPARAMS)==TRUE){stop("Please add a data frame with parameters to the dfPARAMS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfAUXIL)==TRUE){stop("Please add a data frame with auxilaries to the dfAUXILS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(lFORCINGS)==TRUE){stop("Please add a list of matrices with forcings (one for each forcing parameter) to the dfFORCINGS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfRUN_SETTINGS)==TRUE){stop("Please add a data frame with run settings to the dfRUN_SETTINGS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
}
## define the model dll location
dirMODEL <- paste0(dirHOME, "PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/work_cases/", nameWORKCASE, "/model_code/")
##== Get run data ====
run_set     <- which(colnames(dfRUN_SETTINGS) == nRUN_SET)
state_set   <- dfRUN_SETTINGS["iStateSet", run_set]
param_set   <- dfRUN_SETTINGS["iParamSet", run_set]
forcing_set <- which(names(lFORCINGS) == colnames(dfPARAMS)[param_set+4])
sel_params <- dfPARAMS[, param_set + 4]
names(sel_params) <- rownames(dfPARAMS)
sel_inistates	<- dfSTATES[, state_set + 3]
names(sel_inistates) <- rownames(dfSTATES)
sel_forcings <- lFORCINGS[[forcing_set]]
##== Run settings (control panel) ====
## define time over which results will be reported
fREP_START_YEAR <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS) == "dRepStart"), run_set]
## Define time over which results will be averaged for e.g. bifurcation analysis
## Generally refers to a summer growing season period of e.g. day 150-210 (standard setting PCLake) or day 91-259 (the summer half of the year, 1 April to 30 Sept)
fAVG_START_YEAR <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgStart"), run_set]
fAVG_START_DAY	<- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgStartWithinYear"), run_set]
fAVG_END_DAY    <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgEndWithinYear"), run_set]
## timestep at which derivatives are calculated (if integrator uses fixed time step)
internal_time_step <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dIntStep"), run_set]
runtime_years      <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dReady"), run_set] # model run time (in years)
output_time_step   <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dRepStep"), run_set] # time step at which output is generated (in days)
times              <- seq(0, 365*runtime_years, by = output_time_step) # output time step, in dagen
##== Output settings ====
state_names <- rownames(dfSTATES[which(dfSTATES$iReportState == 1),, drop = F])
aux_names 	<- rownames(dfAUXIL[which(dfAUXIL$iReport == 1),, drop = F])
## == Run the model ====
int        <- integrator_method
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
internal_time_step,
dirMODEL)), error = function(e) e))[1] == "simpleError"
if(any(is.na(output)) | error | nrow(output)<max(times)) {  # run the model again when integrator "vode" returns negative or NA outputs, rerun with integrator "daspk"
int        <- "ode45"
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
internal_time_step,
dirMODEL)), error = function(e) e))[1] == "simpleError"
if(any(is.na(output)) | error| nrow(output)<max(times)) { # run the model again when integrator "daspk" returns negative or NA outputs, rerun with integrator "euler"
int        <- "euler"
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
0.003,
dirMODEL)),error = function(e) e))[1] == "simpleError"
if(any(is.na(output)) | error| nrow(output)<max(times)) { # run the model again when integrator "euler" returns negative or NA outputs, rerun with integrator "euler" with timestep 0.001
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
0.001,
dirMODEL)), error = function(e) e))[1] == "simpleError"
}
}
}
output <- as.data.frame(subset(output, subset = (time %in% c((fREP_START_YEAR*365):max(times)))))
if(tAVERAGE == FALSE){
return(output)
}else{
return(output_avg <- as.data.frame(t(colMeans(subset(output,
subset = (time %in% c((fAVG_START_YEAR*365+fAVG_START_DAY):(fAVG_START_YEAR*365+fAVG_END_DAY))))))))
}
}
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# PCModelNetworkRun: WORK IN PROGRESS (used to be PCmodelMultiRun)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PCModelMultiRun <- function(lDATM = NULL,
dfRUN_SETTINGS = lDATM$run_settings,
nRUN_SET,
dfSTATES = lDATM$states,
dfPARAMS = lDATM$params,
dfAUXIL = lDATM$auxils,
lFORCINGS = lDATM$forcings,
runSTATUS = lDATM$run_status,
integrator_method,
dirHOME,
nameWORKCASE,
runTYPE = c("initialize", "restart"), ## run PCModelInitializeModel() on lDATM or not
dfRESTART = NULL){ ## which output to use for restart data (adjust initial states)
#  ## debug
# lDATM             <- lDATM_SETTINGS_multi[[1]]
# lDATM             <- lDATM_SETTINGS
# dfRUN_SETTINGS    <- lDATM$run_settings ## default df with PCmodel control settings
# nRUN_SET          <- 0
# dfSTATES          <- lDATM$states       ## default df with PCmodel states;
# dfPARAMS          <- lDATM$params       ## default df with PCmodel parameters;
# dfAUXIL           <- lDATM$auxils       ## default df with PCmodel auxiliaries
# lFORCINGS         <- lDATM$forcings     ## default df with PCmodel forcings
# integrator_method <- "vode"         ## selected integrator method
# dirHOME           <- dirHome
# dirHOME           <- "C:/Users/Lilith Kramer/PCModel/PCModel-master/Licence_agreement/I_accept/"	## location of the PCModel1350 folder
# nameWORKCASE      <- nameWorkCase
# runTYPE           <- 'initialize'  # c("initialize", "restart")
# dfRESTART         <- NULL
## error catching & check on input data
if(length(runTYPE) > 1 | any(!(runTYPE %in%  c("initialize", "restart"))) == TRUE){stop("Please enter either the value 'initialize' or 'restart' for runTYPE.")}
if(length(nRUN_SET) > 1 | length(which(colnames(dfRUN_SETTINGS) == nRUN_SET)) == 0){stop("Please enter ONE value that matches a column name of a run set in dfRUN_SETTINGS")}
if(is.null(lDATM) == TRUE){
if(is.null(dfRUN_SETTINGS) == TRUE){ stop("Please add a data frame with run settings to the dfRUNSETTINGS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfSTATES) == TRUE){ stop("Please add a data frame with states to the dfSTATES argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfPARAMS) == TRUE){ stop("Please add a data frame with parameters to the dfPARAMS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(dfAUXIL) == TRUE){ stop("Please add a data frame with auxilaries to the dfAUXILS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(lFORCINGS) == TRUE){ stop("Please add a list of matrices with forcings (one for each forcing parameter) to the lFORCINGS argument or supply your DATM list file (from ReadDATM function) in lDATM")}
if(is.null(runSTATUS) == TRUE){stop("The lDATM$run_status is missing from lDATM. You should provide the run_status (a list element containing one positive number indicating the amount of times the model has run.")}
}
## define the model dll location
dirMODEL <- paste0(dirHOME, "PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/work_cases/", nameWORKCASE, "/model_code/")
## model initialization
if(runTYPE == 'initialize'){
dfSTATES <- PCModelInitializeModel(lDATM = lDATM,
dirHOME = dirHOME,
nameWORKCASE = nameWORKCASE)
}
## CHECK THIS PART!! ----
## restart the model
if(runTYPE == 'restart'){
if(is.null(dfRESTART)) {stop("dfRESTART is missing. Please add a data frame with the restart values to the dfRESTART argument.") }
## add restart data names here so people don't have to input this.
# restart_data <- test_multi$output ## debug
restart_data_sel <- restart_data[nrow(restart_data), colnames(restart_data) %in% c("time", restart_names)]
# nSTATE_SET = 0
restart_data_sel_long <- as.data.frame(tidyr::pivot_longer(data = restart_data_sel, cols = colnames(restart_data_sel)[2:length(colnames(restart_data_sel))], names_to = "variable", values_to = "value"))
restart_data_sel_long$variable <- gsub("^a|^o|^u", "s", restart_data_sel_long$variable)
ifelse(all(restart_data_sel_long$variable %in% rownames(lDATM$states)),
lDATM$states[restart_data_sel_long$variable, nSTATE_SET+3] <- restart_data_sel_long$value,
stop("column restart_data_sel_long$variables does not match rownames(lDATM$states)"))
dfSTATES <- PCModelInitializeModel(lDATM = lDATM,
dirHOME = dirHOME,
nameWORKCASE = nameWORKCASE)
}
##== Get run data ====
run_set     <- which(colnames(dfRUN_SETTINGS) == nRUN_SET)
state_set   <- dfRUN_SETTINGS["iStateSet", run_set]
param_set   <- dfRUN_SETTINGS["iParamSet", run_set]
forcing_set <- which(names(lFORCINGS) == colnames(dfPARAMS)[param_set + 4])
sel_params <- dfPARAMS[, param_set + 4]
names(sel_params) <- rownames(dfPARAMS)
sel_inistates	<- dfSTATES[, state_set + 3]
names(sel_inistates) <- rownames(dfSTATES)
sel_forcings <- lFORCINGS[[forcing_set]]
##== Run settings (control panel) ====
## define time over which results will be reported
fREP_START_YEAR <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS) == "dRepStart"), run_set]
## Define time over which results will be averaged for e.g. bifurcation analysis
## Generally refers to a summer growing season period of e.g. day 150-210 (standard setting PCLake) or day 91-259 (the summer half of the year, 1 April to 30 Sept)
fAVG_START_YEAR <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgStart"), run_set]
fAVG_START_DAY	<- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgStartWithinYear"), run_set]
fAVG_END_DAY    <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dAvgEndWithinYear"), run_set]
## timestep at which derivatives are calculated (if integrator uses fixed time step)
internal_time_step <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dIntStep"), run_set]
runtime_years      <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dReady"), run_set] # model run time (in years)
output_time_step   <- dfRUN_SETTINGS[which(rownames(dfRUN_SETTINGS)=="dRepStep"), run_set] # time step at which output is generated (in days)
times              <- seq(0, 365*runtime_years, by = output_time_step) # output time step, in days
##== Output settings ====
state_names <- rownames(dfSTATES[which(dfSTATES$iReportState == 1),, drop = F])
aux_names 	<- rownames(dfAUXIL[which(dfAUXIL$iReport == 1),, drop = F])
## == run PCLake and store the output ====
int        <- integrator_method
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
internal_time_step,
dirMODEL)),
error = function(e) e))[1] == "simpleError"
if(exists("output") == FALSE){
stop("Something went wrong while trying to run the model and the output could not be made. Please check the error of the RunModel function inside the PCModelMultiRun function.")
}
if(any(is.na(output)) | error | nrow(output)<max(times)) {  # run the model again when integrator "vode" returns negative or NA outputs, rerun with integrator "daspk"
int        <- "ode45"
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
internal_time_step,
dirMODEL)),
error = function(e) e))[1] == "simpleError"
if(any(is.na(output)) | error| nrow(output)<max(times)) { # run the model again when integrator "daspk" returns negative or NA outputs, rerun with integrator "euler"
int        <- "euler"
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
0.003,
dirMODEL)),
error = function(e) e))[1] == "simpleError"
if(any(is.na(output)) | error| nrow(output)<max(times)) { # run the model again when integrator "euler" returns negative or NA outputs, rerun with integrator "euler" with timestep 0.001
error      <- class(tryCatch(output <- as.data.frame(RunModel(sel_inistates,
times,
sel_params,
sel_forcings,
length(aux_names),
aux_names,
int,
state_names,
0.001,
dirMODEL)),
error = function(e) e))[1] == "simpleError"
}
}
}
output <- as.data.frame(subset(output, subset = (time %in% c((fREP_START_YEAR*365):max(times)))))
# if(tAVERAGE==TRUE){	output <- as.data.frame(t(colMeans(subset(output, subset=(time %in% c((fAVG_START_YEAR*365+fAVG_START_DAY):(fAVG_START_YEAR*365+fAVG_END_DAY)))))))}
lDATM$output <- output
lDATM$run_status <- runSTATUS + 1
return(lDATM)
}
defaultW <- getOption("warn")
options(warn = -1)
## define directory of model.cpp file
dir_MODEL <-	paste0(dirHOME,
"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/work_cases/",
nameWORKCASE,
"/model_code/")
setwd(dir_MODEL)
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp",intern=TRUE)
out[length(out)]
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
rm(list=ls())
options(scipen = 999)
nearZero <- 1E-28
dirHome <- "C:/Users/SvenT/Documents/PCModel/PCModel-master/Licence_agreement/I_accept/"	# location of the PCModel1350 folder
nameWorkCase <- "PCLake_plus_default"
fileDATM <- "PL613162PLUS_20210422.xls"
## load all the functions
source(paste(dirHome,"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
## 1. Making folder structure
PCModelWorkCaseSetup(dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
## 2. Load file
lDATM_SETTINGS <- PCModelReadDATMFile_PCLakePlus(dirHOME  = dirHome,
fileDATM = fileDATM)
## 3. Make and adjust cpp files
##    - nRUN_SET determines which forcings are switched on
PCModelAdjustCPPfiles(dirHOME = dirHome,
nameWORKCASE = nameWorkCase,
lDATM = lDATM_SETTINGS,
nRUN_SET = 0)
dirHOME = dirHome
nameWORKCASE = nameWorkCase)
nameWORKCASE = nameWorkCase
## define directory of model.cpp file
dir_MODEL <-	paste0(dirHOME,
"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/work_cases/",
nameWORKCASE,
"/model_code/")
setwd(dir_MODEL)
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
grep("Error", out[length(out)])
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
out
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
out
out[length(out)]
grep("Error", out[length(out)])
ifelse(nISERROR!=1, "Model compiled successfully", "Model compile error")
nISERROR = grep("Error", out[length(out)])
ifelse(nISERROR!=1, "Model compiled successfully", "Model compile error")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
# system("compile_model_cpp.cmd", show.output.on.console = T, invisible = FALSE) ## testing
file.remove("model.o")
file.remove("model.dll")
#system("R CMD SHLIB model.cpp")
out <- system("R CMD SHLIB model.cpp", intern=TRUE)
nISERROR <- grep("Error", out[length(out)])
nISERROR
ifelse(length(nISERROR)>0, "Model compiled successfully", "Model compile error")
ifelse(length(nISERROR)==0, "Model compiled successfully", "Model compile error")
rm(list=ls())
options(scipen = 999)
nearZero <- 1E-28
dirHome <- "C:/Users/SvenT/Documents/PCModel/PCModel-master/Licence_agreement/I_accept/"	# location of the PCModel1350 folder
nameWorkCase <- "PCLake_plus_default"
fileDATM <- "PL613162PLUS_20210422.xls"
## load all the functions
source(paste(dirHome,"PCModel1350/PCModel/3.00/Models/PCLake+/6.13.16/PCShell/scripts/R_system/functions_PCLake.R",sep=""))
## NB: you cannot use different combinations of forcings. e.g.
##      - in model run 1: mQInEpi & mQInHyp
##      - in model run 2: mPLoad
##     If you want to do this you'll have to do for both: mQInEpi, mQInHyp AND mPLoad.
##     This is due to the fact that the include file for the parameters (...rp.cpp file) has to be
##     adjusted before compilation - the file will be built into the code.
##     This adjustment entails changing parameters that are given as forcings should become "dummy".
##     BTW: this has never been possible!
##     How is this possible in the Excel version?
## Order of actions
##   1. Making folder structure for running the model
##   2. Load file
##   < Make adjustments to the model >
##   3. Make cpp files
##   4. Compile model
##   5. Initialize model
##   6. Run model
## 1. Making folder structure
PCModelWorkCaseSetup(dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
## 2. Load file
lDATM_SETTINGS <- PCModelReadDATMFile_PCLakePlus(dirHOME  = dirHome,
fileDATM = fileDATM)
## Optional: change sediment settings
# lDATM_SETTINGS$params <- adjustSedimentParamSettings(lDATM_SETTINGS$params, paramset = 2, sediment_type = "clay")
## 3. Make and adjust cpp files
##    - nRUN_SET determines which forcings are switched on
PCModelAdjustCPPfiles(dirHOME = dirHome,
nameWORKCASE = nameWorkCase,
lDATM = lDATM_SETTINGS,
nRUN_SET = 0)
## 4. Compile model
PCModelCompileModelWorkCase(dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
## 5. Initialize model
## 5. Initialize model
##    - make all initial states according to the run settings
InitStates <- PCModelInitializeModel(lDATM = lDATM_SETTINGS,
dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
## 6. run one model
##    - Error catching on run_state & restart (if run_state = 0 & you use restart should you be able to do so?)
PCModel_run01 <- PCmodelSingleRun(lDATM = lDATM_SETTINGS,
nRUN_SET = 0,
dfSTATES = InitStates,
integrator_method = "vode",
dirHOME = dirHome,
nameWORKCASE = nameWorkCase)
PCModel_run01
View(PCModel_run01)
